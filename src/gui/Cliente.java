package gui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.logging.Level;
import java.util.logging.Logger;
import fs.*;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

public class Cliente extends javax.swing.JFrame {

    private static final String IP = "127.0.0.1"; // Puedes cambiar a localhost
    private static final int PUERTO = 1100; //Si cambias aqu√≠ el puerto, recuerda cambiarlo en el servidor

    public Registry registry;
    public FSInterfaz server;
    public FSInterfaz cliente;
    
    public Cliente() throws RemoteException, NotBoundException {
        initComponents();

        cliente = new Middleware();
        registry = LocateRegistry.getRegistry(IP, PUERTO);
        server = (FSInterfaz) registry.lookup("fs"); // Buscar en el registro...
        server.agregarCliente(cliente);
        
        // resultado = interfaz.dividir(numero1, numero2);

        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popMenuDir = new javax.swing.JPopupMenu();
        crearDir = new javax.swing.JMenuItem();
        eliminarDir = new javax.swing.JMenuItem();
        popMenuArchivo = new javax.swing.JPopupMenu();
        crearArchivo = new javax.swing.JMenuItem();
        abrirArchivo = new javax.swing.JMenuItem();
        eliminarArchivo = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        arbolCliente = new javax.swing.JTree();
        btn_cargarArchivo = new javax.swing.JButton();
        btn_desmontarFS = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        crearDir.setText("Crear Directorio");
        crearDir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                crearDirMouseClicked(evt);
            }
        });
        crearDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearDirActionPerformed(evt);
            }
        });
        popMenuDir.add(crearDir);

        eliminarDir.setText("Eliminar Directorio");
        eliminarDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarDirActionPerformed(evt);
            }
        });
        popMenuDir.add(eliminarDir);

        crearArchivo.setText("Crear Archivo");
        popMenuArchivo.add(crearArchivo);

        abrirArchivo.setText("Abrir Archivo");
        popMenuArchivo.add(abrirArchivo);

        eliminarArchivo.setText("Eliminar Archivo");
        eliminarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarArchivoActionPerformed(evt);
            }
        });
        popMenuArchivo.add(eliminarArchivo);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        arbolCliente.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        arbolCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                arbolClienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(arbolCliente);

        btn_cargarArchivo.setText("Cargar Directorios");
        btn_cargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cargarArchivoActionPerformed(evt);
            }
        });

        btn_desmontarFS.setText("Desmontar FS");
        btn_desmontarFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_desmontarFSActionPerformed(evt);
            }
        });

        jLabel1.setText("Cliente");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(btn_desmontarFS, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_cargarArchivo)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addGap(23, 23, 23)
                .addComponent(btn_cargarArchivo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(btn_desmontarFS)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cargarArchivoActionPerformed
        try {
            DefaultTreeModel modelo = server.cargarDirectorio();
            arbolCliente.setModel(modelo);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_cargarArchivoActionPerformed

    private void btn_desmontarFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_desmontarFSActionPerformed

        try {
            server.desmontar();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btn_desmontarFSActionPerformed

    private void arbolClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_arbolClienteMouseClicked
        arbolCliente.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        if (evt.isMetaDown()) {
            int row = arbolCliente.getClosestRowForLocation(evt.getX(), evt.getY());
            arbolCliente.setSelectionRow(row);
            Object v1 = arbolCliente.getSelectionPath().getLastPathComponent();
            nodo_seleccionado = (DefaultMutableTreeNode) v1;
            if (nodo_seleccionado.getUserObject() instanceof File) {
                file_seleccionado = (File) nodo_seleccionado.getUserObject();
                if (file_seleccionado.isDirectory()) {
                    popMenuDir.show(evt.getComponent(), evt.getX(), evt.getY());
                }else{
                    popMenuArchivo.show(evt.getComponent(), evt.getX(), evt.getY());
                }
            }

        }
        /*
        if (evt.isMetaDown()) {
            int row = arbolCliente.getSelectionCount();
            if (row >= 0) {
                
                
                DefaultTreeModel modelo = (DefaultTreeModel) arbolCliente.getModel();
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) arbolCliente.getLastSelectedPathComponent();
                System.out.println(arbolCliente.getLastSelectedPathComponent().getClass());
                Object object = arbolCliente.getLastSelectedPathComponent();
                if (node == null) //Nothing is selected.     
                {

                } else {
                    if (object instanceof DefaultMutableTreeNode) {
                        Object userObject = ((DefaultMutableTreeNode) object).getUserObject();
                        if (userObject.toString().contains(".txt")) {

                            popMenuArchivo.show(evt.getComponent(), evt.getX(), evt.getY());
                        } else {
                            if (node.isRoot()) {
                                
                            }else{
                                popMenuDir.show(evt.getComponent(), evt.getX(), evt.getY());
                            }
                            
                        }
                    }
                }
            }
        }*/
    }//GEN-LAST:event_arbolClienteMouseClicked

    private void crearDirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crearDirMouseClicked
        


    }//GEN-LAST:event_crearDirMouseClicked

    private void crearDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearDirActionPerformed
        DefaultTreeModel modelo = (DefaultTreeModel) arbolCliente.getModel();
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) arbolCliente.getLastSelectedPathComponent();
        System.out.println(node);
        String path = pathArchivo();
        String name = JOptionPane.showInputDialog(this, "Nombre del Directorio");
        path = path.concat(name);
        path = path.concat("/");
        System.out.println(path);
        File dir = new File(path);
        
        try {
            server.crearArchivo(dir, false);    
        } catch (Exception e) {
        }
        cargarArchivo();
        
    }//GEN-LAST:event_crearDirActionPerformed

    private void eliminarDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarDirActionPerformed
        DefaultTreeModel modelo = (DefaultTreeModel) arbolCliente.getModel();
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) arbolCliente.getLastSelectedPathComponent();
        System.out.println(node);
        String path = pathArchivo();
        path = path.concat("/");
        System.out.println(path);
        File dir = new File(path);
        
        try {
            server.eliminarArchivo(dir);    
        } catch (Exception e) {
        }
        cargarArchivo();
    }//GEN-LAST:event_eliminarDirActionPerformed

    private void eliminarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarArchivoActionPerformed
        DefaultTreeModel modelo = (DefaultTreeModel) arbolCliente.getModel();
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) arbolCliente.getLastSelectedPathComponent();
        System.out.println(node);
        String path = pathArchivo();
        //path = path.concat("/");
        System.out.println(path);
        File dir = new File(path);
        
        try {
            server.eliminarArchivo(dir);    
        } catch (Exception e) {
        }
        cargarArchivo();
    }//GEN-LAST:event_eliminarArchivoActionPerformed

    public void cargarArchivo() {
        try {
            DefaultTreeModel modelo = server.cargarDirectorio();
            arbolCliente.setModel(modelo);
        } catch (Exception e) {
        }

    }

    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Cliente().setVisible(true);
                } catch (RemoteException ex) {
                    Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NotBoundException ex) {
                    Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        });
    }
    public String pathArchivo( ){
        String ruta = "./";
        arbolCliente.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        
            int row = arbolCliente.getSelectionCount();
                DefaultTreeModel modelo = (DefaultTreeModel) arbolCliente.getModel();
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) arbolCliente.getLastSelectedPathComponent();
                for (int i = 0; i < node.getPath().length; i++) {
                    ruta =ruta.concat(node.getPath()[i].toString());
                    ruta =ruta.concat("/");
                    
                }
                
                
            
        
        return ruta;
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrirArchivo;
    private javax.swing.JTree arbolCliente;
    private javax.swing.JButton btn_cargarArchivo;
    private javax.swing.JButton btn_desmontarFS;
    private javax.swing.JMenuItem crearArchivo;
    private javax.swing.JMenuItem crearDir;
    private javax.swing.JMenuItem eliminarArchivo;
    private javax.swing.JMenuItem eliminarDir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu popMenuArchivo;
    private javax.swing.JPopupMenu popMenuDir;
    // End of variables declaration//GEN-END:variables
    DefaultMutableTreeNode nodo_seleccionado;
    File file_seleccionado;
}
